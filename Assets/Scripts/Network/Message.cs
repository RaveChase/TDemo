// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NinjaMessage {

  /// <summary>Holder for reflection information generated from message.proto</summary>
  public static partial class MessageReflection {

    #region Descriptor
    /// <summary>File descriptor for message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1tZXNzYWdlLnByb3RvEgxOaW5qYU1lc3NhZ2Ui3QEKB01lc3NhZ2USJAoG",
            "b3BDb2RlGAEgAigOMhQuTmluamFNZXNzYWdlLk9QQ09ERRILCgN1aWQYAiAC",
            "KAUSJgoHcmVxdWVzdBgDIAEoCzIVLk5pbmphTWVzc2FnZS5SZXF1ZXN0EigK",
            "CHJlc3BvbnNlGAQgASgLMhYuTmluamFNZXNzYWdlLlJlc3BvbnNlEg8KB3Rp",
            "bWVOb3cYBSABKAUSDgoGZGV2aWNlGAYgASgJEiwKCm5vdGlmeUluZm8YByAB",
            "KAsyGC5OaW5qYU1lc3NhZ2UuTm90aWZ5SW5mbyItCgdSZXF1ZXN0Eg8KB3Jw",
            "Y0Z1bmMYASABKAkSEQoJcnBjUGFyYW1zGAIgASgJIj4KCFJlc3BvbnNlEhEK",
            "CWVycm9yQ29kZRgBIAIoBRIPCgdycGNGdW5jGAIgASgJEg4KBnJwY1JzcBgD",
            "IAEoCSJCCgpOb3RpZnlJbmZvEhAKCHNlcXVlbmNlGAEgAigDEg8KB3JwY0Z1",
            "bmMYAiABKAkSEQoJcnBjUGFyYW1zGAMgASgJKjEKBk9QQ09ERRIICgROT05F",
            "EAASDAoIUlBDX0NBTEwQARIPCgtOT1RJRllfSU5GTxACKiYKC05PVElGWV9D",
            "T0RFEhcKE05PVElGWV9LSUNLX09GRkxJTkUQASoZCglGTEFHX0NPREUSDAoI",
            "VEVTVENPREUQAQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NinjaMessage.OPCODE), typeof(global::NinjaMessage.NOTIFY_CODE), typeof(global::NinjaMessage.FLAG_CODE), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NinjaMessage.Message), global::NinjaMessage.Message.Parser, new[]{ "OpCode", "Uid", "Request", "Response", "TimeNow", "Device", "NotifyInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NinjaMessage.Request), global::NinjaMessage.Request.Parser, new[]{ "RpcFunc", "RpcParams" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NinjaMessage.Response), global::NinjaMessage.Response.Parser, new[]{ "ErrorCode", "RpcFunc", "RpcRsp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NinjaMessage.NotifyInfo), global::NinjaMessage.NotifyInfo.Parser, new[]{ "Sequence", "RpcFunc", "RpcParams" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///操作码，表示请求意图
  /// </summary>
  public enum OPCODE {
    /// <summary>
    /// 空请求只用于网络检测
    /// </summary>
    [pbr::OriginalName("NONE")] None = 0,
    /// <summary>
    /// 通用RPC
    /// </summary>
    [pbr::OriginalName("RPC_CALL")] RpcCall = 1,
    /// <summary>
    /// 服务端notify
    /// </summary>
    [pbr::OriginalName("NOTIFY_INFO")] NotifyInfo = 2,
  }

  /// <summary>
  ///通知码
  /// </summary>
  public enum NOTIFY_CODE {
    /// <summary>
    /// 被踢下线通知
    /// </summary>
    [pbr::OriginalName("NOTIFY_KICK_OFFLINE")] NotifyKickOffline = 1,
  }

  /// <summary>
  ///标记码
  /// </summary>
  public enum FLAG_CODE {
    [pbr::OriginalName("TESTCODE")] Testcode = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  ///消息包
  /// </summary>
  public sealed partial class Message : pb::IMessage<Message>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Message> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NinjaMessage.MessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message(Message other) : this() {
      _hasBits0 = other._hasBits0;
      opCode_ = other.opCode_;
      uid_ = other.uid_;
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      timeNow_ = other.timeNow_;
      device_ = other.device_;
      notifyInfo_ = other.notifyInfo_ != null ? other.notifyInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Message Clone() {
      return new Message(this);
    }

    /// <summary>Field number for the "opCode" field.</summary>
    public const int OpCodeFieldNumber = 1;
    private readonly static global::NinjaMessage.OPCODE OpCodeDefaultValue = global::NinjaMessage.OPCODE.None;

    private global::NinjaMessage.OPCODE opCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NinjaMessage.OPCODE OpCode {
      get { if ((_hasBits0 & 1) != 0) { return opCode_; } else { return OpCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        opCode_ = value;
      }
    }
    /// <summary>Gets whether the "opCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "opCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 2;
    private readonly static int UidDefaultValue = 0;

    private int uid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uid {
      get { if ((_hasBits0 & 2) != 0) { return uid_; } else { return UidDefaultValue; } }
      set {
        _hasBits0 |= 2;
        uid_ = value;
      }
    }
    /// <summary>Gets whether the "uid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUid {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "uid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUid() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 3;
    private global::NinjaMessage.Request request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NinjaMessage.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 4;
    private global::NinjaMessage.Response response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NinjaMessage.Response Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    /// <summary>Field number for the "timeNow" field.</summary>
    public const int TimeNowFieldNumber = 5;
    private readonly static int TimeNowDefaultValue = 0;

    private int timeNow_;
    /// <summary>
    /// 服务器时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeNow {
      get { if ((_hasBits0 & 4) != 0) { return timeNow_; } else { return TimeNowDefaultValue; } }
      set {
        _hasBits0 |= 4;
        timeNow_ = value;
      }
    }
    /// <summary>Gets whether the "timeNow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimeNow {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "timeNow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimeNow() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "device" field.</summary>
    public const int DeviceFieldNumber = 6;
    private readonly static string DeviceDefaultValue = "";

    private string device_;
    /// <summary>
    /// 设备信息串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Device {
      get { return device_ ?? DeviceDefaultValue; }
      set {
        device_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "device" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDevice {
      get { return device_ != null; }
    }
    /// <summary>Clears the value of the "device" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDevice() {
      device_ = null;
    }

    /// <summary>Field number for the "notifyInfo" field.</summary>
    public const int NotifyInfoFieldNumber = 7;
    private global::NinjaMessage.NotifyInfo notifyInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NinjaMessage.NotifyInfo NotifyInfo {
      get { return notifyInfo_; }
      set {
        notifyInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Message);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Message other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpCode != other.OpCode) return false;
      if (Uid != other.Uid) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      if (TimeNow != other.TimeNow) return false;
      if (Device != other.Device) return false;
      if (!object.Equals(NotifyInfo, other.NotifyInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOpCode) hash ^= OpCode.GetHashCode();
      if (HasUid) hash ^= Uid.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (HasTimeNow) hash ^= TimeNow.GetHashCode();
      if (HasDevice) hash ^= Device.GetHashCode();
      if (notifyInfo_ != null) hash ^= NotifyInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOpCode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OpCode);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (request_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Response);
      }
      if (HasTimeNow) {
        output.WriteRawTag(40);
        output.WriteInt32(TimeNow);
      }
      if (HasDevice) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (notifyInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(NotifyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOpCode) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OpCode);
      }
      if (HasUid) {
        output.WriteRawTag(16);
        output.WriteInt32(Uid);
      }
      if (request_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Response);
      }
      if (HasTimeNow) {
        output.WriteRawTag(40);
        output.WriteInt32(TimeNow);
      }
      if (HasDevice) {
        output.WriteRawTag(50);
        output.WriteString(Device);
      }
      if (notifyInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(NotifyInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOpCode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpCode);
      }
      if (HasUid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uid);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (HasTimeNow) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeNow);
      }
      if (HasDevice) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Device);
      }
      if (notifyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotifyInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Message other) {
      if (other == null) {
        return;
      }
      if (other.HasOpCode) {
        OpCode = other.OpCode;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::NinjaMessage.Request();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::NinjaMessage.Response();
        }
        Response.MergeFrom(other.Response);
      }
      if (other.HasTimeNow) {
        TimeNow = other.TimeNow;
      }
      if (other.HasDevice) {
        Device = other.Device;
      }
      if (other.notifyInfo_ != null) {
        if (notifyInfo_ == null) {
          NotifyInfo = new global::NinjaMessage.NotifyInfo();
        }
        NotifyInfo.MergeFrom(other.NotifyInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OpCode = (global::NinjaMessage.OPCODE) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 26: {
            if (request_ == null) {
              Request = new global::NinjaMessage.Request();
            }
            input.ReadMessage(Request);
            break;
          }
          case 34: {
            if (response_ == null) {
              Response = new global::NinjaMessage.Response();
            }
            input.ReadMessage(Response);
            break;
          }
          case 40: {
            TimeNow = input.ReadInt32();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            if (notifyInfo_ == null) {
              NotifyInfo = new global::NinjaMessage.NotifyInfo();
            }
            input.ReadMessage(NotifyInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpCode = (global::NinjaMessage.OPCODE) input.ReadEnum();
            break;
          }
          case 16: {
            Uid = input.ReadInt32();
            break;
          }
          case 26: {
            if (request_ == null) {
              Request = new global::NinjaMessage.Request();
            }
            input.ReadMessage(Request);
            break;
          }
          case 34: {
            if (response_ == null) {
              Response = new global::NinjaMessage.Response();
            }
            input.ReadMessage(Response);
            break;
          }
          case 40: {
            TimeNow = input.ReadInt32();
            break;
          }
          case 50: {
            Device = input.ReadString();
            break;
          }
          case 58: {
            if (notifyInfo_ == null) {
              NotifyInfo = new global::NinjaMessage.NotifyInfo();
            }
            input.ReadMessage(NotifyInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///请求消息
  /// </summary>
  public sealed partial class Request : pb::IMessage<Request>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NinjaMessage.MessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      rpcFunc_ = other.rpcFunc_;
      rpcParams_ = other.rpcParams_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "rpcFunc" field.</summary>
    public const int RpcFuncFieldNumber = 1;
    private readonly static string RpcFuncDefaultValue = "";

    private string rpcFunc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcFunc {
      get { return rpcFunc_ ?? RpcFuncDefaultValue; }
      set {
        rpcFunc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rpcFunc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRpcFunc {
      get { return rpcFunc_ != null; }
    }
    /// <summary>Clears the value of the "rpcFunc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRpcFunc() {
      rpcFunc_ = null;
    }

    /// <summary>Field number for the "rpcParams" field.</summary>
    public const int RpcParamsFieldNumber = 2;
    private readonly static string RpcParamsDefaultValue = "";

    private string rpcParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcParams {
      get { return rpcParams_ ?? RpcParamsDefaultValue; }
      set {
        rpcParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rpcParams" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRpcParams {
      get { return rpcParams_ != null; }
    }
    /// <summary>Clears the value of the "rpcParams" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRpcParams() {
      rpcParams_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcFunc != other.RpcFunc) return false;
      if (RpcParams != other.RpcParams) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRpcFunc) hash ^= RpcFunc.GetHashCode();
      if (HasRpcParams) hash ^= RpcParams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasRpcFunc) {
        output.WriteRawTag(10);
        output.WriteString(RpcFunc);
      }
      if (HasRpcParams) {
        output.WriteRawTag(18);
        output.WriteString(RpcParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRpcFunc) {
        output.WriteRawTag(10);
        output.WriteString(RpcFunc);
      }
      if (HasRpcParams) {
        output.WriteRawTag(18);
        output.WriteString(RpcParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRpcFunc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcFunc);
      }
      if (HasRpcParams) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.HasRpcFunc) {
        RpcFunc = other.RpcFunc;
      }
      if (other.HasRpcParams) {
        RpcParams = other.RpcParams;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RpcFunc = input.ReadString();
            break;
          }
          case 18: {
            RpcParams = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RpcFunc = input.ReadString();
            break;
          }
          case 18: {
            RpcParams = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///返回消息
  /// </summary>
  public sealed partial class Response : pb::IMessage<Response>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NinjaMessage.MessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      _hasBits0 = other._hasBits0;
      errorCode_ = other.errorCode_;
      rpcFunc_ = other.rpcFunc_;
      rpcRsp_ = other.rpcRsp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "errorCode" field.</summary>
    public const int ErrorCodeFieldNumber = 1;
    private readonly static int ErrorCodeDefaultValue = 0;

    private int errorCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ErrorCode {
      get { if ((_hasBits0 & 1) != 0) { return errorCode_; } else { return ErrorCodeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        errorCode_ = value;
      }
    }
    /// <summary>Gets whether the "errorCode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasErrorCode {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "errorCode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearErrorCode() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rpcFunc" field.</summary>
    public const int RpcFuncFieldNumber = 2;
    private readonly static string RpcFuncDefaultValue = "";

    private string rpcFunc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcFunc {
      get { return rpcFunc_ ?? RpcFuncDefaultValue; }
      set {
        rpcFunc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rpcFunc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRpcFunc {
      get { return rpcFunc_ != null; }
    }
    /// <summary>Clears the value of the "rpcFunc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRpcFunc() {
      rpcFunc_ = null;
    }

    /// <summary>Field number for the "rpcRsp" field.</summary>
    public const int RpcRspFieldNumber = 3;
    private readonly static string RpcRspDefaultValue = "";

    private string rpcRsp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcRsp {
      get { return rpcRsp_ ?? RpcRspDefaultValue; }
      set {
        rpcRsp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rpcRsp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRpcRsp {
      get { return rpcRsp_ != null; }
    }
    /// <summary>Clears the value of the "rpcRsp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRpcRsp() {
      rpcRsp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrorCode != other.ErrorCode) return false;
      if (RpcFunc != other.RpcFunc) return false;
      if (RpcRsp != other.RpcRsp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasErrorCode) hash ^= ErrorCode.GetHashCode();
      if (HasRpcFunc) hash ^= RpcFunc.GetHashCode();
      if (HasRpcRsp) hash ^= RpcRsp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasRpcFunc) {
        output.WriteRawTag(18);
        output.WriteString(RpcFunc);
      }
      if (HasRpcRsp) {
        output.WriteRawTag(26);
        output.WriteString(RpcRsp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasErrorCode) {
        output.WriteRawTag(8);
        output.WriteInt32(ErrorCode);
      }
      if (HasRpcFunc) {
        output.WriteRawTag(18);
        output.WriteString(RpcFunc);
      }
      if (HasRpcRsp) {
        output.WriteRawTag(26);
        output.WriteString(RpcRsp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasErrorCode) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ErrorCode);
      }
      if (HasRpcFunc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcFunc);
      }
      if (HasRpcRsp) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcRsp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.HasErrorCode) {
        ErrorCode = other.ErrorCode;
      }
      if (other.HasRpcFunc) {
        RpcFunc = other.RpcFunc;
      }
      if (other.HasRpcRsp) {
        RpcRsp = other.RpcRsp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            RpcFunc = input.ReadString();
            break;
          }
          case 26: {
            RpcRsp = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ErrorCode = input.ReadInt32();
            break;
          }
          case 18: {
            RpcFunc = input.ReadString();
            break;
          }
          case 26: {
            RpcRsp = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NotifyInfo : pb::IMessage<NotifyInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NotifyInfo> _parser = new pb::MessageParser<NotifyInfo>(() => new NotifyInfo());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NinjaMessage.MessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyInfo(NotifyInfo other) : this() {
      _hasBits0 = other._hasBits0;
      sequence_ = other.sequence_;
      rpcFunc_ = other.rpcFunc_;
      rpcParams_ = other.rpcParams_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyInfo Clone() {
      return new NotifyInfo(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private readonly static long SequenceDefaultValue = 0L;

    private long sequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sequence {
      get { if ((_hasBits0 & 1) != 0) { return sequence_; } else { return SequenceDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sequence_ = value;
      }
    }
    /// <summary>Gets whether the "sequence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSequence {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sequence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSequence() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rpcFunc" field.</summary>
    public const int RpcFuncFieldNumber = 2;
    private readonly static string RpcFuncDefaultValue = "";

    private string rpcFunc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcFunc {
      get { return rpcFunc_ ?? RpcFuncDefaultValue; }
      set {
        rpcFunc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rpcFunc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRpcFunc {
      get { return rpcFunc_ != null; }
    }
    /// <summary>Clears the value of the "rpcFunc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRpcFunc() {
      rpcFunc_ = null;
    }

    /// <summary>Field number for the "rpcParams" field.</summary>
    public const int RpcParamsFieldNumber = 3;
    private readonly static string RpcParamsDefaultValue = "";

    private string rpcParams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RpcParams {
      get { return rpcParams_ ?? RpcParamsDefaultValue; }
      set {
        rpcParams_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rpcParams" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRpcParams {
      get { return rpcParams_ != null; }
    }
    /// <summary>Clears the value of the "rpcParams" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRpcParams() {
      rpcParams_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sequence != other.Sequence) return false;
      if (RpcFunc != other.RpcFunc) return false;
      if (RpcParams != other.RpcParams) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSequence) hash ^= Sequence.GetHashCode();
      if (HasRpcFunc) hash ^= RpcFunc.GetHashCode();
      if (HasRpcParams) hash ^= RpcParams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSequence) {
        output.WriteRawTag(8);
        output.WriteInt64(Sequence);
      }
      if (HasRpcFunc) {
        output.WriteRawTag(18);
        output.WriteString(RpcFunc);
      }
      if (HasRpcParams) {
        output.WriteRawTag(26);
        output.WriteString(RpcParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSequence) {
        output.WriteRawTag(8);
        output.WriteInt64(Sequence);
      }
      if (HasRpcFunc) {
        output.WriteRawTag(18);
        output.WriteString(RpcFunc);
      }
      if (HasRpcParams) {
        output.WriteRawTag(26);
        output.WriteString(RpcParams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSequence) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sequence);
      }
      if (HasRpcFunc) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcFunc);
      }
      if (HasRpcParams) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RpcParams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyInfo other) {
      if (other == null) {
        return;
      }
      if (other.HasSequence) {
        Sequence = other.Sequence;
      }
      if (other.HasRpcFunc) {
        RpcFunc = other.RpcFunc;
      }
      if (other.HasRpcParams) {
        RpcParams = other.RpcParams;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sequence = input.ReadInt64();
            break;
          }
          case 18: {
            RpcFunc = input.ReadString();
            break;
          }
          case 26: {
            RpcParams = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sequence = input.ReadInt64();
            break;
          }
          case 18: {
            RpcFunc = input.ReadString();
            break;
          }
          case 26: {
            RpcParams = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
